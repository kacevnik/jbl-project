import React, { useEffect, useContext } from 'react'
import { DragDropContainer } from 'react-drag-drop-container';
import { Context } from '../../context';

const ColumnElem = ({hintRotateElem}) => {

  const { setHintRotateElem } = useContext(Context);

  const nameElem = 'column-elem';
  let cls = []

  if(hintRotateElem === nameElem){
    cls.push('dnd shake shake-rotate')
  }

  useEffect(() => {
    document.querySelector('#' + nameElem + ' .ddcontainer').style.cursor = 'default'
  })

  const styles = {
    top: '26.9%',
    left: '61.5%',
    width: '2.666666em',
    height: '5.8333333em',
    position: 'absolute',
  }

  const landedOn = (e) => {
    setHintRotateElem(false)
    document.getElementById(e.name).classList.add('dnd')
    let areaLeft = document.querySelector('.level-two-jbl').getBoundingClientRect().left;
    let elemLeft = parseInt(document.querySelector('#' +e.name+ ' .ddcontainerghost').style.left)
    let areaWidth = document.querySelector('.level-two-jbl').offsetWidth
    let elemWidth = document.querySelector('#' +e.name+ ' .ddcontainerghost > div').offsetWidth
    let areaTop = document.querySelector('.level-two-jbl').getBoundingClientRect().top;
    let elemTop = parseInt(document.querySelector('#' +e.name+ ' .ddcontainerghost').style.top)
    let areaHeight = document.querySelector('.level-two-jbl').offsetHeight
    let elemHeight = document.querySelector('#' +e.name+ ' .ddcontainerghost > div').offsetHeight
    

    if(elemLeft <= areaLeft){
      document.querySelector('#' + e.name + ' .ddcontainerghost').style.left = areaLeft
    }

    if (elemLeft + elemWidth >= areaLeft + areaWidth) {
      document.querySelector('#' + e.name + ' .ddcontainerghost').style.left = areaLeft + areaWidth - elemWidth
    }

    if (elemTop <= areaTop) {
      document.querySelector('#' + e.name + ' .ddcontainerghost').style.top = areaTop
    }

    if(elemTop + elemHeight >= areaTop + areaHeight) {
      document.querySelector('#' + e.name + ' .ddcontainerghost').style.top = areaTop + areaHeight - elemHeight
    }
  }

  const landedEnd = (e) => {
    setHintRotateElem(false)
  }

  return (
    <span style={styles} id={nameElem}>
      <DragDropContainer
        targetKey="column-elem"
        dragData={{name: nameElem }}
        onDrag={(e) => landedOn(e)}
        onDragEnd={(e) => landedEnd(e)}
        dragElemOpacity={1}
      >
        
        <div style={styles} className={cls.join(' ')}>
            <svg viewBox="0 0 64 140" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M61.9407 61.1428C60.3383 22.6895 59.3366 21.1913 58.6356 17.1962C58.3351 15.1986 56.5323 10.3045 55.9314 9.0061C55.2303 7.30816 53.8281 6.90864 52.1254 6.40924C50.5229 5.90985 47.2178 5.01095 44.0128 3.61265C40.7077 2.31422 39.5058 2.31421 39.5058 2.31421L38.2038 2.21435C34.0974 1.91471 30.0912 1.91471 25.9848 2.21435L24.6828 2.31421C24.6828 2.31421 23.4809 2.31422 20.1758 3.61265C16.8707 4.91107 13.6656 5.90985 12.0632 6.40924C10.4607 6.90864 9.0585 7.40804 8.25725 9.0061C7.55616 10.704 6.15397 13.8003 5.55304 17.1962C4.85195 21.0914 3.8504 22.6895 2.24791 61.1428C2.24791 61.1428 1.74716 91.3062 2.14778 99.8958C2.5484 108.485 3.04914 117.474 3.54992 120.571C4.0507 123.767 5.15245 129.56 5.15245 129.56L7.65634 137.151C7.85666 137.85 8.55772 138.349 9.25881 138.349H15.7689C17.071 138.349 18.373 138.05 19.4747 137.55L20.6766 137.051C21.0772 136.851 21.4778 136.851 21.8785 137.051L23.0803 137.75C23.5811 138.05 24.0819 138.149 24.6828 138.149H39.2054C39.7062 138.149 40.3071 138.05 40.8079 137.75L42.0097 137.051C42.4104 136.851 42.9111 136.851 43.2116 137.051L44.4135 137.55C45.6154 138.05 46.8172 138.349 48.1192 138.349H54.6293C55.4306 138.349 56.0315 137.85 56.2319 137.151L58.7357 129.56C58.7357 129.56 59.8374 123.667 60.3382 120.571C60.839 117.375 61.3398 108.485 61.7404 99.8958C62.4415 91.3062 61.9407 61.1428 61.9407 61.1428Z" fill="#404041" stroke="#231F20" strokeWidth="2" strokeMiterlimit="10"/>
            <path d="M39.7409 114.328V113.828H39.2409H34.8526H34.3522L34.3526 114.329L34.3563 119.666C34.3563 119.666 34.3563 119.666 34.3563 119.666C34.3561 120.889 33.5043 121.761 32.5951 121.761C31.6863 121.761 30.8339 120.886 30.8339 119.666L30.8339 93.4253V92.9253H30.3339H25.9493H25.4493V93.4253L25.4493 124.093V124.593H25.9493H39.2409H39.7409V124.093L39.7409 114.328Z" fill="#FBFF3F" stroke="black"/>
            <path d="M25.1842 14.9885H24.6842V15.4885L24.6842 46.1565V46.6565H25.1842H33.9571C35.7397 46.6565 36.9784 45.9883 37.764 45.0639C38.5354 44.156 38.8417 43.035 38.8417 42.1492V32.9591C38.8417 32.1741 38.4977 31.3087 37.924 30.6401C37.6635 30.3365 37.348 30.0649 36.985 29.8579C37.3877 29.5278 37.7194 29.0949 37.9763 28.6548C38.5211 27.7218 38.8417 26.577 38.8417 25.7126V20.4869C38.8417 16.7803 35.8909 14.9885 33.9571 14.9885L25.1842 14.9885ZM30.0651 18.8846H31.9604C32.3568 18.8846 32.5896 18.9119 32.7493 18.9797C32.8734 19.0323 32.9881 19.1237 33.0954 19.3734C33.2128 19.6468 33.3071 20.0809 33.3681 20.7776C33.4285 21.4669 33.4534 22.3742 33.4534 23.5717C33.4534 24.7693 33.4285 25.6721 33.3682 26.3547C33.3072 27.0451 33.213 27.4685 33.0972 27.7314C32.9929 27.9682 32.8825 28.0525 32.7591 28.1018C32.5967 28.1666 32.362 28.1901 31.9614 28.1902C31.9611 28.1902 31.9607 28.1902 31.9604 28.1902L30.0651 28.1834V18.8846ZM32.2249 43.1423L30.0651 43.1388V31.7816H32.2249C32.5947 31.7816 32.7841 31.8569 32.9025 31.9576C33.0278 32.064 33.1555 32.2681 33.253 32.6972C33.4537 33.5806 33.4571 35.0602 33.4571 37.4984C33.4571 38.7017 33.4571 39.6762 33.4304 40.4669C33.4035 41.2621 33.3503 41.8397 33.2535 42.258C33.1566 42.6766 33.0305 42.8709 32.9082 42.9717C32.7903 43.0689 32.5996 43.1422 32.2257 43.1423C32.2257 43.1423 32.2257 43.1423 32.2257 43.1423C32.2254 43.1423 32.2252 43.1423 32.2249 43.1423Z" fill="#FBFF3F" stroke="black"/>
            <path d="M34.8403 103.507L34.6158 104.167L35.3137 104.167L41.3696 104.167L42.0676 104.167L41.8431 103.507L38.8151 94.5942L38.3417 93.2008L37.8683 94.5942L34.8403 103.507Z" fill="#FBFF3F" stroke="black"/>
            <path d="M30.8047 72.2864V72.7864H31.3047H33.472V74.9465C33.472 76.0029 33.3987 76.9081 33.2542 77.643L33.2537 77.6456C33.1194 78.3476 32.8865 78.854 32.5953 79.1932C32.3564 79.4678 31.9785 79.6422 31.3942 79.6422C30.8159 79.6422 30.4419 79.4791 30.2037 79.2277L30.2021 79.226C29.9278 78.9391 29.7072 78.4765 29.5796 77.8014C29.4454 77.0852 29.3759 76.2168 29.3759 75.2082L29.3759 62.5729C29.3759 61.6833 29.4199 60.8589 29.51 60.1238L29.51 60.1238L29.5104 60.121C29.5888 59.4495 29.7819 58.9457 30.0485 58.594C30.2493 58.3316 30.616 58.1432 31.2712 58.1432C31.9206 58.1432 32.2728 58.2979 32.4458 58.4794C32.6656 58.7153 32.8469 59.105 32.9459 59.7066C33.0519 60.3538 33.1069 61.1573 33.1069 62.0924V63.9801V64.4801H33.6069H38.2262H38.7262V63.9801V62.2382C38.7262 60.3276 38.499 58.6482 38.0294 57.2643C37.5492 55.8429 36.7448 54.7102 35.6164 53.9285L35.616 53.9282C34.4822 53.1448 32.9865 52.7712 31.2079 52.7712C29.2952 52.7712 27.7026 53.2169 26.5353 54.1607C25.3813 55.0908 24.5837 56.4364 24.1491 58.1089C23.7219 59.7361 23.5107 61.6771 23.5107 63.8772L23.5107 74.0112C23.5107 76.1615 23.7259 78.0735 24.1612 79.6885C24.6051 81.3389 25.3633 82.6733 26.4333 83.6152L26.434 83.6158C27.5303 84.5771 28.9954 85.0441 30.746 85.0441C32.0168 85.0441 33.0972 84.6794 33.8996 83.9151L33.9003 83.9145C34.1321 83.6929 34.3455 83.4517 34.5401 83.1919L34.6523 84.1882L34.7023 84.6323H35.1492H38.3417H38.8417V84.1323L38.8417 68.4722V67.9722H38.3417H31.3047H30.8047V68.4722V68.4765V72.2864Z" fill="#FBFF3F" stroke="black"/>
            </svg>
        </div>
        </DragDropContainer>
    </span>
  )
}

export default ColumnElem
