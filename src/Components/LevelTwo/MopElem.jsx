import React, { useEffect } from 'react'
import { DragDropContainer } from 'react-drag-drop-container';

const MopElem = () => {

  const nameElem = 'mop';

  useEffect(() => {
    document.querySelector('#' + nameElem + ' .ddcontainer').style.cursor = 'default'
  })

  const styles = {
    top: '28.9%',
    left: '0',
    width: '6.2083333em',
    height: '18.875em',
    position: 'absolute',
  }

  const landedOn = (e) => {
    document.getElementById(e.name).classList.add('dnd')
    let areaLeft = document.querySelector('.level-two-jbl').getBoundingClientRect().left;
    let elemLeft = parseInt(document.querySelector('#' +e.name+ ' .ddcontainerghost').style.left)
    let areaWidth = document.querySelector('.level-two-jbl').offsetWidth
    let elemWidth = document.querySelector('#' +e.name+ ' .ddcontainerghost > div').offsetWidth
    let areaTop = document.querySelector('.level-two-jbl').getBoundingClientRect().top;
    let elemTop = parseInt(document.querySelector('#' +e.name+ ' .ddcontainerghost').style.top)
    let areaHeight = document.querySelector('.level-two-jbl').offsetHeight
    let elemHeight = document.querySelector('#' +e.name+ ' .ddcontainerghost > div').offsetHeight
    

    if(elemLeft <= areaLeft){
      document.querySelector('#' + e.name + ' .ddcontainerghost').style.left = areaLeft
    }

    if (elemLeft + elemWidth >= areaLeft + areaWidth) {
      document.querySelector('#' + e.name + ' .ddcontainerghost').style.left = areaLeft + areaWidth - elemWidth
    }

    if (elemTop <= areaTop) {
      document.querySelector('#' + e.name + ' .ddcontainerghost').style.top = areaTop
    }

    if(elemTop + elemHeight >= areaTop + areaHeight) {
      document.querySelector('#' + e.name + ' .ddcontainerghost').style.top = areaTop + areaHeight - elemHeight
    }
  }

  const landedEnd = (e) => {
    document.getElementById(e.name).classList.remove('dnd')
  }

  return (
    <span style={styles} id={nameElem}>
      <DragDropContainer
        targetKey="mop"
        dragData={{name: nameElem }}
        onDrag={(e) => landedOn(e)}
        onDragEnd={(e) => landedEnd(e)}
        dragElemOpacity={1}
      >
        
        <div style={styles}>
        <svg viewBox="0 0 149 453" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g mask="url(#mask0)">
            <path d="M45.797 369.538C50.2896 385.209 55.2085 395.309 61.3983 402.963C67.5891 410.618 75.0785 415.862 84.7867 421.784C86.1616 422.622 87.9147 422.536 89.2075 421.571C91.5643 419.812 91.2647 416.151 88.6677 414.683C78.7455 409.077 71.5778 403.31 66.1177 395.922C60.6597 388.538 56.9327 379.568 53.8394 367.597C53.0904 364.698 49.6496 363.428 47.2772 365.199C45.9314 366.204 45.3363 367.931 45.797 369.538Z" fill="#FFF480" stroke="black"/>
            <path d="M49.5376 371.119C57.4359 385.379 64.4983 394.116 72.2496 400.184C80.0019 406.252 88.478 409.679 99.2686 413.269C100.797 413.777 102.485 413.299 103.528 412.068C105.43 409.824 104.315 406.324 101.455 405.478C90.527 402.245 82.2468 398.235 75.2664 392.263C68.2889 386.294 62.6419 378.39 56.9381 367.42C55.5569 364.764 51.9189 364.3 50.0049 366.558C48.9193 367.84 48.7274 369.656 49.5376 371.119Z" fill="#FFF480" stroke="black"/>
            <path d="M107.989 397.721C106.354 397.484 104.887 397.317 103.513 397.16C103.005 397.102 102.51 397.045 102.023 396.987C100.227 396.773 98.5599 396.538 96.8759 396.136C93.4925 395.327 90.0806 393.847 85.3675 390.542C83.729 389.393 82.3621 387.934 81.0971 386.415C80.5567 385.766 80.0306 385.1 79.5102 384.442C79.4216 384.33 79.3331 384.218 79.2448 384.107C78.6356 383.337 78.0304 382.581 77.4039 381.86C72.1966 375.864 62.0074 368.795 56.0301 365.081C54.5385 364.155 52.5986 364.679 51.7036 366.225C51.0775 367.306 51.1144 368.739 51.6599 370.085C52.2047 371.43 53.2203 372.592 54.4035 373.125C59.1123 375.243 65.1911 378.997 68.8279 383.964C74.4364 391.038 79.184 395.877 84.8326 399.324C90.4807 402.771 97.0675 404.85 106.388 406.34C108.2 406.63 110.002 405.748 110.927 404.15C112.469 401.488 110.971 398.153 107.989 397.721Z" fill="#FFF480" stroke="black"/>
            <path d="M44.4136 433.424C44.9661 431.867 45.5017 430.491 46.0034 429.202C46.1888 428.726 46.3696 428.261 46.5449 427.804C47.1924 426.114 47.7622 424.53 48.1908 422.853C49.0521 419.482 49.3337 415.774 48.6063 410.064C48.3534 408.079 47.6997 406.189 46.9452 404.362C46.6229 403.581 46.2794 402.806 45.9396 402.038C45.8818 401.908 45.824 401.777 45.7665 401.647C45.3698 400.75 44.9828 399.862 44.6366 398.971C41.759 391.569 40.2545 379.26 39.7551 372.241C39.6304 370.489 40.9984 369.017 42.7834 368.946C44.0319 368.896 45.2819 369.596 46.2191 370.707C47.155 371.815 47.7098 373.256 47.6293 374.551C47.3091 379.704 47.7966 386.832 50.496 392.365C54.1404 400.624 56.2081 407.08 56.6252 413.684C57.0423 420.288 55.8118 427.084 52.7854 436.025C52.1973 437.763 50.5771 438.947 48.732 439.02C45.6587 439.143 43.4057 436.263 44.4136 433.424Z" fill="#FFF480" stroke="black"/>
            <path d="M108.1 397.184C97.7991 384.549 89.3003 377.202 80.5965 372.604C71.8915 368.006 62.9422 366.135 51.6864 364.514C50.0923 364.285 48.515 365.055 47.7066 366.451C46.2331 368.996 47.9501 372.243 50.9151 372.569C62.2432 373.815 71.1029 376.294 79.031 380.934C86.956 385.573 93.914 392.35 101.472 402.136C103.302 404.506 106.964 404.318 108.448 401.756C109.289 400.302 109.156 398.48 108.1 397.184Z" fill="#FFF480" stroke="black"/>
            <path d="M50.3072 373.117C50.5398 374.752 50.7039 376.22 50.8575 377.595C50.9143 378.103 50.9697 378.598 51.0266 379.085C51.2367 380.881 51.4669 382.549 51.8655 384.234C52.6663 387.619 54.1372 391.035 57.4309 395.756C58.576 397.397 60.0317 398.768 61.5479 400.037C62.1956 400.578 62.8597 401.106 63.5167 401.628C63.6285 401.717 63.7402 401.806 63.8515 401.894C64.6194 402.505 65.3741 403.112 66.094 403.741C72.0772 408.963 79.121 419.169 82.82 425.155C83.7431 426.649 83.2141 428.588 81.666 429.479C80.5832 430.103 79.1509 430.062 77.8056 429.513C76.462 428.965 75.3023 427.947 74.7728 426.762C72.6655 422.048 68.9267 415.961 63.9684 412.312C56.9081 406.686 52.0814 401.927 48.6477 396.269C45.2144 390.613 43.1512 384.021 41.6839 374.697C41.3987 372.885 42.2849 371.084 43.8851 370.163C46.5507 368.628 49.8828 370.134 50.3072 373.117Z" fill="#FFF480" stroke="black"/>
            <path d="M119.964 377.879C118.643 376.888 117.489 375.966 116.409 375.103C116.009 374.783 115.62 374.472 115.236 374.169C113.816 373.047 112.475 372.03 111.001 371.121C108.041 369.293 104.586 367.918 98.9185 366.909C96.9483 366.558 94.9499 366.618 92.9807 366.793C92.1394 366.868 91.2968 366.964 90.463 367.06C90.3211 367.076 90.1794 367.092 90.038 367.108C89.063 367.219 88.1001 367.323 87.1468 367.388C79.2236 367.927 67.0258 365.69 60.1772 364.073C58.4683 363.669 57.4715 361.924 57.9359 360.2C58.2608 358.993 59.3021 358.009 60.6414 357.446C61.979 356.883 63.5192 356.783 64.7312 357.246C69.5545 359.09 76.5031 360.751 82.5892 359.825C91.5597 358.81 98.3381 358.763 104.766 360.335C111.194 361.907 117.314 365.109 124.945 370.665C126.428 371.745 127.074 373.644 126.594 375.427C125.794 378.397 122.373 379.689 119.964 377.879Z" fill="#FFF480" stroke="black"/>
            <path d="M60.8752 367.132C84.9921 370.671 104.749 386.145 113.176 393.715C115.014 395.366 118.037 394.672 118.875 392.393C119.317 391.188 119.015 389.837 118.097 388.946C109.462 380.559 102.151 374.455 93.6033 369.886C85.0577 365.318 75.2464 362.27 61.5958 360.039C59.9768 359.774 58.397 360.708 57.8285 362.255C57.0331 364.42 58.5395 366.79 60.8752 367.132Z" fill="#FFF480" stroke="black"/>
            <rect x="36.2533" y="360.83" width="28.1166" height="16.3766" rx="8.1883" transform="rotate(-15.669 36.2533 360.83)" fill="#6AD1CB" stroke="black"/>
            <path d="M2.60286 11.4416L44.4852 361.69C44.8843 365.027 48.0986 367.273 51.3696 366.502C54.1581 365.844 56.0081 363.197 55.6679 360.352L13.7856 10.1043C13.3865 6.76734 10.1722 4.52053 6.90121 5.29221C4.11272 5.95007 2.26269 8.59678 2.60286 11.4416Z" fill="#FF9476" stroke="black"/>
            </g>
            </svg>
        </div>
        </DragDropContainer>
    </span>
  )
}

export default MopElem
